import java.util.*;
import javax.swing.*;
import java.awt.*;

//I completed this assignment by myself using only the resources from the textbook and materials

/**
* Minefield class which scans through a charachter map generated by a FieldGenerator Object, then creates a 2D array
* of Tile objects corresponding to the character at the each position in the character map. It stores variables
* detailing the size of the grid and the number of mines, as well as whether or not the game has ended.
* @author Adam Yost
* @version 1
*/

public class Minefield {

	public Tile[][] grid;
	private boolean over = false;
	private int width;
	private int height;
	private int mines;
	private FieldGenerator fg;
	private boolean started;
	
	
/**
* Constructor for a Minefield object, setting up a grid of blank tiles of the specified dimensions. The supplied
* FieldGenerator is stored in order to be used once the first click is registered.
* @param f a FieldGenerator object
* @param w an Integer representing the number of tiles wide the grid will be
* @param h an Integer representing the number of tiles tall the grid will be
*/
public Minefield(FieldGenerator f, int w, int h){
	width = w;
	height= h;
	fg = f;
	over = false;
	started = false;
	grid = new Tile[w][h];
	for(int x = 0; x<width; x++){
		for(int y =0; y<height; y++){
			Tile t = new StartTile(this, x, y);
			grid[x][y] = t;
			}
		}
}
/**
* Getter for the Tile at a specified coordinate on the grid
* @param x Integer representing the x coordinate
* @param y Integer representing the y coordinate
* @return a Tile object representing the tile at the specified coordinates
*/

public Tile getTile(int x, int y){
	return grid[x][y];
	}

/**
* Setter for the Tile at a given coordinate on the grid
* @param x Integer object representing the x coordinate
* @param y Integer object representing the y coordinate
* @param t Tile object to be assigned to the grid location specified by the supplied coordinates
*/

public void setTile(int x, int y, Tile t){
	grid[x][y] = t;
	}

/**
* Setter for the over variable which determines if the game has been completed
* @param b Boolean object representing whether the game has been completed
*/

public void setOver(boolean b){
	over = b;
	}

/**
* Getter for the over variable, which returns whether or not the game has been completed
* @return true if the game is over, false if not
*/

public boolean getOver(){
	return over;
	}
	
/**
* Getter for the width variable, returns the horizontal size of the grid
* @return an integer representing the width of the grid
*/
public int getWidth(){
	return width;
	}

/**
* Setter for the width variable, sets the horizontal size of the grid to the supplied integer
* @param a Integer representing the desired width
*/

public void setWidth(int a){
	width = a;
	}

/**
* Setter for the mines variable representing the number of mines in the field
* @param a Integer object representing the desired number of mines
*/
public void setMines(int a){
	mines = a;
	}
/**
* Getter for the mines variable
* @return current number of mines
*/	
public int getMines(){
	return mines;
	}
/**
* Getter for the height variable
* @return the current height of the grid
*/
public int getHeight(){
	return height;
	}
/**
* Setter for the height variable
* @param a Integer object representing the desired height of the grid
*/
public void setHeight(int a){
	height = a;
	}
/**
* Method which creates a Minefield around the first clicked location, insuring that the first click is not a mine.
* Creates a field with randomly placed mines and numbered tiles surrounding those randomly placed mines.
* @param inix Integer representing the x coordinate of the first click
* @param iniy Integer representing the y coordinate of the first click
*/
public void fillIn(int inix, int iniy){
	fg.generateField(width,height,'#', 'e', mines, inix,iniy);
	started = true;
	char[][] charmap = fg.getCharField();
	grid = new Tile[width][height];
	
	for(int a = 0; a<charmap.length; a++){
		for(int b = 0; b<charmap[a].length; b++){
			if (charmap[a][b] == 'e'){
				grid[a][b] = new BlankTile(this, a, b);
				}
			else if(charmap[a][b] == '#'){
				grid[a][b] = new MineTile(this, a,b);
				}
			else if(charmap[a][b] == '1'){
				grid[a][b] = new NumberTile(this,a,b,1);
				}
			else if(charmap[a][b] == '2'){
				grid[a][b] = new NumberTile(this,a,b,2);
				}
			else if(charmap[a][b] == '3'){
				grid[a][b] = new NumberTile(this,a,b,3);
				}
			else if(charmap[a][b] == '4'){
				grid[a][b] = new NumberTile(this,a,b,4);
				}
			else if(charmap[a][b] == '5'){
				grid[a][b] = new NumberTile(this,a,b,5);
				}
			else if(charmap[a][b] == '6'){
				grid[a][b] = new NumberTile(this,a,b,6);
				}
			else if(charmap[a][b] == '7'){
				grid[a][b] = new NumberTile(this,a,b,7);
				}
			else if(charmap[a][b] == '8'){
				grid[a][b] = new NumberTile(this,a,b,8);
				}
			}
		}
		grid[inix][iniy].clicked();
	}
}